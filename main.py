import os
import time
import asyncio
import re
from pathlib import Path
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from yt_dlp import YoutubeDL

API_ID = 18100193
API_HASH = "a27360d3fcef230d33af8e8c4c4c7de6"
BOT_TOKEN = "7290550046:AAE0SSr9tubBo9uL4IkzgT9O1ve39MF5dFg"

app = Client("playlist_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

def sanitize_filename(name: str) -> str:
    return re.sub(r'[\\/*?:"<>|]', "", name)

# Store active chats
active_chats = set()

@app.on_message(filters.command("start"))
async def start(_, message):
    active_chats.add(message.chat.id)
    await message.reply_text(
        "ЁЯО╢ **YouTube Playlist Downloader Bot**\n\n"
        "рдЗрд╕ рдмреЛрдЯ рдХреА рдорджрдж рд╕реЗ рдЖрдк YouTube рд╕реЗ рдЧрд╛рдиреЗ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред\n\n"
        "command рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ:\n\n"
        "`/start` - рдмреЛрдЯ рдЪрд╛рд▓реВ рдХрд░реЗрдВ\n"
        "`/stop` - рдмреЛрдЯ рдмрдВрдж рдХрд░реЗрдВ\n\n"
        "ЁЯО╡ Send me a YouTube video or playlist link or just a song name.\n\n\n"
        "I'll download audio (mp3) or video (mp4) and send it to you.\n\n\n"
        "рдЕрдЧрд░ рдЖрдк рд▓рд┐рдВрдХ рдирд╣реАрдВ рднреЗрдЬреЗрдВрдЧреЗ рддреЛ рдореИрдВ рдЧрд╛рдиреЗ рдХреЗ рдирд╛рдо рд╕реЗ YouTube рд╕рд░реНрдЪ рдХрд░рдХреЗ рд╕рдмрд╕реЗ рдЬрд╝реНрдпрд╛рджрд╛ рд╡реНрдпреВрдЬрд╝ рд╡рд╛рд▓рд╛ рдпрд╛ рдкрд╣рд▓рд╛ рдорд┐рд▓рдиреЗ рд╡рд╛рд▓рд╛ рдЧрд╛рдирд╛ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБред\n\n\n\n"
        "ЁЯСЗ рдЧрд╛рдиреЗ рдХрд╛ рдирд╛рдо рднреЗрдЬреЗрдВ рдФрд░ рдлрд┐рд░ рдСрдкреНрд╢рди рдЪреБрдиреЗрдВред"
    )

@app.on_message(filters.command("stop"))
async def stop(_, message):
    active_chats.discard(message.chat.id)
    await message.reply_text("ЁЯЫС рдмреЛрдЯ рдЗрд╕ рдЪреИрдЯ рдореЗрдВ рдмрдВрдж рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред `/start` рднреЗрдЬреЗрдВ рджреЛрдмрд╛рд░рд╛ рдЪрд╛рд▓реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдПред")

user_searches = {}

@app.on_message(filters.text & ~filters.command(["start", "stop"]))
async def ask_user_choice(_, message: Message):
    if message.chat.id not in active_chats:
        return  # Ignore if chat not activated

    user_input = message.text.strip()
    user_searches[message.chat.id] = user_input

    buttons = [
        [
            InlineKeyboardButton("ЁЯФЭ Highest Viewed", callback_data="search_top"),
            InlineKeyboardButton("ЁЯФН First Result", callback_data="search_first"),
        ],
        [
            InlineKeyboardButton("ЁЯО╡ Ringtone", callback_data="search_ringtone"),
        ]
    ]

    await message.reply_text(
        f"рдЖрдкрдиреЗ рднреЗрдЬрд╛: **{user_input}**\n\n"
        "рдЕрдм рдЪреБрдиреЗрдВ рдХрд┐ рдЖрдкрдХреЛ рдХрд┐рд╕ рддрд░рд╣ рдХрд╛ рд░рд┐рдЬрд╝рд▓реНрдЯ рдЪрд╛рд╣рд┐рдП:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

@app.on_callback_query()
async def handle_choice(_, query: CallbackQuery):
    if query.message.chat.id not in active_chats:
        await query.answer("тЫФя╕П рдпрд╣ рдЪреИрдЯ рдмрдВрдж рд╣реИред рдкрд╣рд▓реЗ /start рднреЗрдЬреЗрдВред", show_alert=True)
        return

    user_id = query.message.chat.id
    user_input = user_searches.get(user_id)

    if not user_input:
        await query.answer("тЭМ рд╕рд░реНрдЪ рдХреНрд╡реЗрд░реА рдирд╣реАрдВ рдорд┐рд▓реАред рдкрд╣рд▓реЗ рдХреЛрдИ рд╕реЙрдиреНрдЧ рднреЗрдЬреЗрдВред", show_alert=True)
        return

    await query.answer()  # remove loading state
    await query.message.edit_text("ЁЯФО YouTube рдкрд░ рд╕рд░реНрдЪ рдХрд░ рд░рд╣рд╛ рд╣реВрдБ, рдХреГрдкрдпрд╛ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ...<br> рдХреГрдкрдпрд╛ 5 рдорд┐рдирдЯ (min) рд░реБрдХрд┐рдПред")

    try:
        if user_input.startswith("http") and ("youtube.com" in user_input or "youtu.be" in user_input):
            url = user_input
            pick_best = False
        else:
            if query.data == "search_top":
                search_url = f"ytsearch10:{user_input}"
                pick_best = True
            elif query.data == "search_first":
                search_url = f"ytsearch1:{user_input}"
                pick_best = False
            elif query.data == "search_ringtone":
                search_url = f"ytsearch1:{user_input} ringtone"
                pick_best = False
            else:
                await query.message.edit_text("тЭМ Invalid option.")
                return

            ydl_opts_search = {"quiet": True, "skip_download": True}
            with YoutubeDL(ydl_opts_search) as ydl:
                result = ydl.extract_info(search_url, download=False)

            if "entries" not in result or not result["entries"]:
                await query.message.edit_text("тЭМ рдХреЛрдИ рд░рд┐рдЬрд╝рд▓реНрдЯ рдирд╣реАрдВ рдорд┐рд▓рд╛ред")
                return

            info = max(result["entries"], key=lambda e: e.get("view_count", 0)) if pick_best else result["entries"][0]
            url = info["webpage_url"]

        # ЁЯФ╜ Get info for actual title and prepare filename
        ydl_opts_info = {"quiet": True, "skip_download": True}
        with YoutubeDL(ydl_opts_info) as ydl:
            info = ydl.extract_info(url, download=False)

        title = sanitize_filename(info.get("title", "song"))
        download_dir = Path("downloads")
        download_dir.mkdir(parents=True, exist_ok=True)
        local_file = download_dir / f"{title}.mp3"

        # тЬЕ Check if file already exists
        if local_file.exists():
            await app.send_audio(
                chat_id=query.message.chat.id,
                audio=str(local_file),
                title=title,
                caption=f"ЁЯОз Already in library: {title}"
            )
            await query.message.edit_text("тЬЕ рдЧрд╛рдирд╛ рдкрд╣рд▓реЗ рд╕реЗ рдореМрдЬреВрдж рдерд╛, рднреЗрдЬ рджрд┐рдпрд╛ рдЧрдпрд╛ред")
            return  # No need to download again

        # ЁЯФ╜ Proceed to download from YouTube
        ydl_opts = {
            "format": "bestaudio/best",
            "outtmpl": str(download_dir / f"{title}.%(ext)s"),
            "quiet": True,
            "postprocessors": [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }],
        }

        await query.message.edit_text(f"ЁЯО╢ '{title}' рдХреЛ рдбрд╛рдЙрдирд▓реЛрдб рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ.. <br> рдХреГрдкрдпрд╛ 5 рдорд┐рдирдЯ (min) рд░реБрдХрд┐рдПред")

        start_time = time.time()
        with YoutubeDL(ydl_opts) as ydl:
            song_info = ydl.extract_info(url, download=True)
            file_path = ydl.prepare_filename(song_info)
            mp3_file = Path(file_path).with_suffix(".mp3")
        duration = time.time() - start_time

        if mp3_file.exists():
            await app.send_audio(
                chat_id=query.message.chat.id,
                audio=str(mp3_file),
                title=title,
                caption=f"тЬЕ Downloaded in {duration:.1f} sec\n\nЁЯОз Now Playing: {title}"
            )
            await query.message.edit_text("тЬЕ рдЧрд╛рдирд╛ рднреЗрдЬ рджрд┐рдпрд╛ рдЧрдпрд╛!")
        else:
            await query.message.edit_text("тЪая╕П рдЧрд╛рдирд╛ рдбрд╛рдЙрдирд▓реЛрдб рдирд╣реАрдВ рд╣реЛ рдкрд╛рдпрд╛ред")

    except Exception as e:
        await query.message.edit_text(f"тЭМ Error: {e}")

print("ЁЯЪА Bot is running...")
app.run()
